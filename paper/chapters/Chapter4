\chapter{Implementaci\'on n\'umerica del m\'etodo de Bisecci\'on y de Brent}
\label{Bisec-Brent}
\markboth{}{}
En esta sección vamos a implementar el método de Bisección y el método brent para aproximar la 
volatilidad implícita utilizando la fórmula de Black Scholes.

\section{Introducción}

Tanto el método de Bisección como el método de Brent son algoritmos de búsqueda de raíces de funciones. Luego
como nuestro objetivo es encontrar el valor de la volatilidad implícita.

La función 4.1 va a ser la función a la cual aplicaremos los métodos matemáticos.

Sea c la prima de una opción call europea.

\vspace{5mm}

\begin{equation}
g(\hat{\sigma}) = S(0)\Phi(d_1) - Ke^{-rT}\Phi(d_2) - c
\end{equation}

\vspace{5mm}

donde:

$d_1 = \displaystyle\frac{Log \left(\displaystyle\frac{S(0)}{K}\right)+ \left( r + \displaystyle\frac{\hat{\sigma}^2}{2}\right)T}{\hat{\sigma}\sqrt{T}}$
\qquad  $d_2 = d_1 - \hat{\sigma}\sqrt{T}$

\vspace{5mm}

\section{g es monótona creciente con respecto a $\sigma$}

Sea $B(\sigma) = S(0)\Phi(d_1) - Ke^{-rT}\Phi(d_2)$, donde $d_1$ y $d_2$ son definidas en la sección anterior.

En \cite{Kisbye} se demuestra que:

\begin{equation}
B'(\sigma) = Ke^{-rT}\Phi'(d_2)\sqrt{T} > 0
\end{equation}


que es una expresión positiva para todo $ \sigma > 0$.

Luego como B es una función monótonamente creciente con respecto $\sigma$, entonces 


\begin{equation}
g(\sigma) = B(\sigma) - c
\end{equation}


tambien lo es, ya que c es constante. 


\section{Inicialización de intervalo para método de bisección y de brent}

Como sabemos de la sección anterior, $g:(0,\infty) \to {\rm I\!R}$ es una función monótona creciente. Podemos postular
$a = \epsilon$, con $\epsilon \to 0$, entonces $g(a) < 0$. 

Ahora para postular b utilizaremos el siguiente algoritmo:

\vspace{5mm}

\begin{algorithm}[H]
\SetAlgoLined
\SetKwInOut{Input}{Input}
\SetKwInOut{Output}{Output}
\ResetInOut{output}
\Input{g}
\Output{b}
 b := 1\;
 \While{g(b) $<$ 0}{
  b := b*10\;
 }
 return\;
 \caption{Encontrar b}
\end{algorithm}


\section{Aplicación del Método de Bisección}

Sea g la función definida en la sección 4.1.

Inicializamos el intervalo [a,b] para aplicar el método de bisección, con $a < b$ y $g(a) < 0 < g(b)$.

Luego aplicar el algoritmo de bisección hasta hallar un $\xi$, tal que $g(\xi) = 0$ ó $|b-a|<\varepsilon$, a
$\varepsilon$ lo llamaremos tolerancia.

\section{Aplicación del Método de Brent}

Sea g la función definida en la sección 4.1.

Inicializamos el intervalo [a,b] para aplicar el método de brent, con $a < b$ y $g(a) < 0 < g(b)$.

Luego aplicar el algoritmo de brent hasta hallar un $\xi$, tal que $g(\xi) = 0$ ó $|b-a|<\varepsilon$, a
$\varepsilon$ lo llamaremos tolerancia.

\section{Problemas Númericos}


En la muestra hay aproximado un 0.05\% de casos que no cumplen con la condición $g(a)g(b) < 0$, 
para $a \to 0$ y $b \to \infty$, donde g es la función definida en la sección 4.1. Por lo tanto no se puede aplicar ninguno de los métodos vistos anteriormente.

El problema radica en el cálculo de la fórmula de Black-Scholes definida en el capítulo 2.1 (ecuación 2.1), básicamente en $\Phi(d_1)$
y $\Phi(d_2)$. Por definición $\Phi(n) < 1$, $\forall n \in \mathbb{R}$. Pero Python usa aritmética de punto flotante IEEE-754, donde su precisión es $2^{(-56)}$, dando asi una precisión aproximada de 15,95 dijitos decimales. Luego usando la función de Scipy para el cálculo de la distribución normal acumulada definida en \cite{Normal}, obtenemos $\Phi(n) = 1$, para $n > 8.3$.

\vspace{5mm}

Volviendo a la fórmula de Black-Scholes, sabemos que $\Phi(d_1) > \Phi(d_2)$, ya que $o,T > 0$, pero hay casos en que el extremo inferior, definido para aplicar el método de bisección(o brent), obtengo $\Phi(d_1) = \Phi(d_2)$ por el problema de precisión, ocasionando el error antes mencionado.

Esto es la cantidad de números representables en un rango. El formato se escribe con un significando que tiene un bit entero implícito de valor 1 (excepto para los números especiales). Con los 52 bits de la mantisa, la precisión total es por lo tanto de 53 bits (es decir de $53log_{10}(2) \approx 15.955$ que se redondea a 16 dígitos decimales). El exponente de este formato está sesgado o desplazado en 1023 unidades, ya que como el máximo valor representado por 11 bits es 
$2^{11}-1=2047$, es la mitad de este rango la que representa exponentes positivos y la otra, exponentes negativos.
\cite{IEEE}

Observar Figura 4.1.

\begin{figure}[t!]
  \includegraphics[width=16cm, height=3cm]{imagenes/precision}
  \caption{Estructura de un número en formato de coma flotante de doble precisión}
\end{figure}

\vspace{5mm}

Lo cual esto nos da que hay $2^{52}$ numeros entre $2^n$ y $2^{n+1}$ para todo n entero en [-1023, 1022].


\subsection{Caso en Particular}

Sea:

\begin{itemize}
  \item c : 5.983489610184446
  \item S : 15.752756180327959
  \item k : 10
  \item r : 0.09010364215460305
  \item T : 0.2590760904347537 
\end{itemize} 

La Figura 4.2 muestra la comparación entre g(n), para $n \in [0.01, 1]$, y la volatilidad implícita (linea roja punteada). Se puede observar que no se puede hallar el intervalo [a,b] para aplicar el método de bisección(o brent), ya que para este caso g(n) es positivo $ \forall n < 0.01$.

\vspace{5mm}

Si tomo $o = 0.01$(extremo inferior del intervalo), obtengo:

\begin{itemize}  
  \item $\Phi(d_1) = 1$, $\Phi(d_2) = 1$
\end{itemize}

$g(0.01) = 1.7763568394002505e-15$

\vspace{5mm}

Pero si aplico la normal con la volatilidad implícita $o = 0.11928197090875538$, obtengo:

\begin{itemize}  
  \item $\Phi(d_1) = 0.9999999999999986$, $\Phi(d_2) = 0.9999999999999982$ 
\end{itemize}

$g(0.11928197091) = 0$, contradiciendo la propiedad de monótona creciente. 

\begin{figure}
  \includegraphics[width=10cm, height=6cm]{g}
  \caption{Función g}
\end{figure}

\begin{figure}[]
  \centering
  \begin{minipage}[b]{0.45\textwidth}
    \includegraphics[width=\textwidth]{norm1.png}
    \caption{$\Phi(d_1)$.}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.45\textwidth}
    \includegraphics[width=\textwidth]{norm1_c.png}
    \caption{$\Phi(d_1)$.}
  \end{minipage}
\end{figure}
